<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>davia</title>
  <subtitle>给时光以生命。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://davia.info/"/>
  <updated>2017-01-07T07:45:31.000Z</updated>
  <id>http://kingname.info/</id>
  
  <author>
    <name>Kingname</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>30秒找到藏在家里的手机</title>
    <link href="http://kingname.info/2017/01/07/findmyphone/"/>
    <id>http://kingname.info/2017/01/07/findmyphone/</id>
    <published>2017-01-07T06:02:02.000Z</published>
    <updated>2017-01-07T07:45:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们都有这样的生活体验</p>
<blockquote>
<p>我清清楚楚的记得半个小时前还用手机打了电话，怎么现在手机找不到了？这半个小时我一直在房间里，难道手机还会长翅膀飞走了吗？</p>
</blockquote>
<p>如果你有两个手机而且你的手机没有静音，那可以用另一个手机给不见的手机打一个电话。可是如果你的手机静音了呢？有人说可以等到晚上打电话，看家里哪里在发光。那么如果你的手机不仅静音，还屏幕朝下呢？</p>
<p>看了这篇文章以后，只要你的手机在家里，只要手机开机，只要手机可以上网，那么你就可以在30秒以内找到它，不论它是否静音。</p>
<a id="more"></a>
<p>根本原理还是让手机播放音乐，我们通过音乐来找到手机。但是在放音乐之前，需要让手机自动解除静音，并将音量调到最大声。</p>
<p>和<a href="http://kingname.info/2016/11/07/autoalarmclock/">《如果我提前起床，闹钟你就别响》</a>一样，这一次的任务依然是借助Python语言+ Flask框架 + 安卓上面的自动化程序：Automate来完成。不过，这一次我会把这个工具提供给大家一起使用。</p>
<h2 id="四个网址"><a href="#四个网址" class="headerlink" title="四个网址"></a>四个网址</h2><p>本文将会涉及到四个网址：</p>
<ul>
<li>注册你的账号&gt;<a href="http://automatic.kingname.info:8888/账号/register" target="_blank" rel="external">http://automatic.kingname.info:8888/账号/register</a></li>
<li>获取当前状态&gt;<a href="http://automatic.kingname.info:8888/kingname" target="_blank" rel="external">http://automatic.kingname.info:8888/账号</a></li>
<li>让手机在30秒以后放音乐&gt;<a href="http://automatic.kingname.info:8888/kingname/find" target="_blank" rel="external">http://automatic.kingname.info:8888/账号/find</a></li>
<li>停止寻找手机&gt;<a href="http://automatic.kingname.info:8888/kingname/cancel" target="_blank" rel="external">http://automatic.kingname.info:8888/账号/cancel</a></li>
</ul>
<h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>为了让每个人都能使用这个服务，我开放了账号注册的功能。注册只需要提供用户名即可，不需要密码，不需要邮箱，不需要手机号。注册账号只需要访问<a href="http://automatic.kingname.info:8888/账号/register" target="_blank" rel="external">http://automatic.kingname.info:8888/账号/register</a> 其中，账号只能使用大小写字母或者数字或者下划线。如果你的账号可以使用，你将会看到如下画面：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-14-40-02.png" alt=""><br>就是这么简单。你的账号已经注册成功了，接下来就可以使用服务了。</p>
<p>当然，如果你的账号不巧被别人注册过了，你将会看到如下的提示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-14-41-25.png" alt=""><br>这个时候你需要换一个账号注册。</p>
<h3 id="获得状态"><a href="#获得状态" class="headerlink" title="获得状态"></a>获得状态</h3><p>注册完成以后，访问<a href="http://automatic.kingname.info:8888/账号" target="_blank" rel="external">http://automatic.kingname.info:8888/账号</a>, 你可以看到当前的状态，如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-15-27-38.png" alt=""><br>这句话表示，现在不需要让手机自己叫起来。这个网址是给手机上面的Automate使用的，一般情况下不需要手动输入。</p>
<h3 id="呼叫手机"><a href="#呼叫手机" class="headerlink" title="呼叫手机"></a>呼叫手机</h3><p>突然，你发现你的手机不见了。这个时候，赶紧访问<a href="http://automatic.kingname.info:8888/账号/find" target="_blank" rel="external">http://automatic.kingname.info:8888/账号/find</a>, 如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-14-50-03.png" alt=""><br>当你访问了这个页面以后，在30秒内，你的手机就会欢快的播放音乐了。各位需要把这个网址保存为书签，方便以后直接使用。</p>
<h3 id="停止呼叫"><a href="#停止呼叫" class="headerlink" title="停止呼叫"></a>停止呼叫</h3><p>当你找到了手机，你就需要这个网址：<a href="http://automatic.kingname.info:8888/账号/cancel" target="_blank" rel="external">http://automatic.kingname.info:8888/账号/cancel</a> 这个网址一般情况下是给Automate使用的，大家不需要手动输入。</p>
<h2 id="Automate"><a href="#Automate" class="headerlink" title="Automate"></a>Automate</h2><p>现在再来看看安卓上面的Automate应该如何配置流程。我已经将文件放在了：<a href="https://github.com/kingname/Automatic/blob/master/BackEnd/automate/Find%20my%20phone.flo" target="_blank" rel="external">Github</a>上面。点击Download按钮即可下载，如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-15-04-56.png" alt=""></p>
<p>下载完成以后，将这个文件放在手机中，打开手机上的Automate，点击右上角的三个竖着的点，选择<code>Import</code>，如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-15-08-49.png" alt=""></p>
<p>再点击<code>SD card</code>,如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-15-08-24.png" alt=""></p>
<p>选中刚刚下载的文件，即可导入成功。导入完成以后，打开这个flow, 点击右上角铅笔的图标，可以打开整个流程图：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-15-16-49.png" alt=""><br>你需要修改的，只有我画红框的三个方块。</p>
<p>对于这两个HTTP Request，你只需要在<code>REQUEST URL</code>中，把网址里面的账号修改成你自己的账号。<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-15-19-27.png" alt=""></p>
<p>对于Sound Play这个方块，因为我手机上面的音乐不一定在你手机上也有同样的，所以一定要修改音乐：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2017-01-07-15-20-50.png" alt=""><br>点<code>SOUND URI</code>，选择你一个你喜欢的音乐。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Flow设置完成，点击右上角✓保存，然后点击<code>Start</code>启动这个Flow。在电脑或者手机浏览器中访问：<a href="http://automatic.kingname.info:8888/账号/find" target="_blank" rel="external">http://automatic.kingname.info:8888/账号/find</a> 坐等30秒，听一下你的手机相应你的呼唤吧。然后再试一试把手机调成静音，看看它是不是依然可以大声的叫出来~</p>
<p>本文设计到的网页源代码，请访问：<a href="https://github.com/kingname/Automatic" target="_blank" rel="external">https://github.com/kingname/Automatic</a>获取。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都有这样的生活体验&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我清清楚楚的记得半个小时前还用手机打了电话，怎么现在手机找不到了？这半个小时我一直在房间里，难道手机还会长翅膀飞走了吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你有两个手机而且你的手机没有静音，那可以用另一个手机给不见的手机打一个电话。可是如果你的手机静音了呢？有人说可以等到晚上打电话，看家里哪里在发光。那么如果你的手机不仅静音，还屏幕朝下呢？&lt;/p&gt;
&lt;p&gt;看了这篇文章以后，只要你的手机在家里，只要手机开机，只要手机可以上网，那么你就可以在30秒以内找到它，不论它是否静音。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="Automatic" scheme="http://kingname.info/tags/Automatic/"/>
    
      <category term="Workflow" scheme="http://kingname.info/tags/Workflow/"/>
    
  </entry>
  
  <entry>
    <title>用图像识别来自动确认网页加载成功</title>
    <link href="http://kingname.info/2016/12/04/how-to-know-webpage-loaded/"/>
    <id>http://kingname.info/2016/12/04/how-to-know-webpage-loaded/</id>
    <published>2016-12-04T10:10:33.000Z</published>
    <updated>2016-12-04T13:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在对安卓手机设计自动化测试用例的时候，判断一个测试场景是否可以自动化的依据在于其是否需要人的参与。对于wifi能否自动打开关闭，短信能否自动收发这样的场景，不需要人参与就可以通过程序来判断，因此对Wifi与短信这样的测试，可以通过程序来实现自动化测试。但是另外还有一些测试场景，需要人的眼睛来看，这种场景要实现自动化就比较困难。<br><a id="more"></a></p>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>使用安卓的浏览器访问一个网站，如何判断网站已经加载成功？目标网站确实已经收到了请求，也返回了HTML数据，手机也收到了网站返回的数据，但是不知道什么原因，在某些时候，浏览器上面却什么都没有显示，而浏览器输出的Log却完全看不出异样。对于这样的场景，为了减少人力开销，如何让测试程序自动发现网页没有加载成功，并通知开发者？</p>
<p>这个需求可以使用计算机图像识别来实现自动化。</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>由于这个需求只需要判断网页是否加载成功，因此并不需要非常高深的图像识别的理论。对一个网页来说，所谓的加载成功就是指它里面的内容能够正常地在浏览器中显示出来。因此，可以设计一个特别的网页，网页要足够简单，但是又要足够特别，从而方便图像识别。</p>
<p>这篇文章将会使用一个纯绿色的网页来进行测试。网页加载完成以后，手机屏幕上绝大多数的区域是绿色的。这个时候，截取屏幕，并使用程序来识别这张截图。如果发现截图中有大面积的绿色区域，那就证明网页已经加载完成了。</p>
<h2 id="Demo实现"><a href="#Demo实现" class="headerlink" title="Demo实现"></a>Demo实现</h2><h3 id="纯绿色的网页"><a href="#纯绿色的网页" class="headerlink" title="纯绿色的网页"></a>纯绿色的网页</h3><p>创建一个“greenpage.html”，它的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Green Page&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body bgcolor=&quot;green&quot;&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>网站加载成功以后，页面是全绿色的，如下图所示。<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2016-12-04-18-49-20.png" alt=""></p>
<p>在局域网中搭建一个Web Server，并让局域网的设备可以链接。打开终端，进入到这个html文件所在的文件夹，并通过Python 3在局域网中搭建一个简单地WebServer：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/Project/IdentifyWebpage</div><div class="line">python -m http.server</div></pre></td></tr></table></figure></p>
<p>使用手机访问“电脑IP:8000/greenpage.html”，效果如下图所示。<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2016-12-04-19-01-42.png" alt=""></p>
<h3 id="识别绿色截图"><a href="#识别绿色截图" class="headerlink" title="识别绿色截图"></a>识别绿色截图</h3><p>这个Demo使用Pillow图像处理库来做图像颜色的识别，通过pip安装Pillow：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pillow</div></pre></td></tr></table></figure></p>
<p>安装完成以后，在Python程序中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from PIL import Image</div></pre></td></tr></table></figure></p>
<p>导入它图像模块。</p>
<p>程序使用Image模块载入截图，并从截图中读取某一点颜色RGB值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">img = Image.open(&apos;snapshot.png&apos;)</div><div class="line">color = img.getpixel((700, 800))</div><div class="line">print(color)</div></pre></td></tr></table></figure></p>
<p>代码中的（700, 800）是截图中的某一点的座标。第一个参数为横座标，第二个参数为纵座标。截图左上角为(0, 0)，越往下，纵座标越大；越往右，横座标越大。</p>
<p>为了谨慎起见，在截图中取9个点，分别获取他们的RGB值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">points = [(200, 300), (455, 678), (333, 1200),</div><div class="line">          (300, 500), (888, 678), (900, 800),</div><div class="line">          (400, 600), (245, 365), (799, 777)]</div><div class="line">img = Image.open(&apos;snapshot.png&apos;)</div><div class="line">for point in self.points:</div><div class="line">    color = img.getpixel(point)</div><div class="line">    print(color)</div></pre></td></tr></table></figure></p>
<p>运行以后的结果如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/2016-12-04-19-44-55.png" alt=""><br>从图中可以看到，9个点的RGB值全部是(0, 128, 0)，这个值正是绿色的RGB值。到这里，可以认为这个图片大部分的地方确实是绿色的。如果你觉得9个点还是不够全面，那你可以使用代码生成几百个点来计算。</p>
<h3 id="获取屏幕截图"><a href="#获取屏幕截图" class="headerlink" title="获取屏幕截图"></a>获取屏幕截图</h3><p>adb（Android Debug Bridge）是安卓的调试工具，可以通过adb的命令来控制手机。要对手机截图，只需要使用下面两条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell /system/bin/screencap -p /sdcard/screenshot.png</div><div class="line">adb pull /sdcard/screenshot.png ~/Project/IndenfyWebpage/screenshot.png</div></pre></td></tr></table></figure></p>
<p>第一条命令生成截图，并将截图保存到手机内置存储中。虽然这里写的是“sdcard”，但是对于现在没有SD卡的手机，这条命令依然可以使用。</p>
<p>第二条命令将手机内置存储中的截图文件取出来，并保存到电脑中。如果你的电脑为Windows系统，可以将第二条命令修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/screenshot.png D:/Project/IndenfyWebpage/screenshot.png</div></pre></td></tr></table></figure></p>
<p>保存到D盘下面。注意这里使用的是从右上到左下的斜杠（/）。</p>
<p>完整的程序请访问-&gt; <a href="https://github.com/kingname/Automatic" target="_blank" rel="external">https://github.com/kingname/Automatic</a></p>
<h2 id="更多应用"><a href="#更多应用" class="headerlink" title="更多应用"></a>更多应用</h2><p>虽然这个Demo只是针对网页来进行测试。但是这个方法除了网页还可以验证很多其他的测试场景。例如验证视频能否正常播放，做一个特殊的视频，视频中是几个不同的纯色画面不停的切换。每一个画面停留一定的时间，程序定时获取截图并分析此时是否为纯色画面，且纯色画面是否在更换。</p>
<p>理论上讲，任何需要在屏幕上显示信息的测试案例，都可以使用这个方法来实现自动化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在对安卓手机设计自动化测试用例的时候，判断一个测试场景是否可以自动化的依据在于其是否需要人的参与。对于wifi能否自动打开关闭，短信能否自动收发这样的场景，不需要人参与就可以通过程序来判断，因此对Wifi与短信这样的测试，可以通过程序来实现自动化测试。但是另外还有一些测试场景，需要人的眼睛来看，这种场景要实现自动化就比较困难。&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="PIL" scheme="http://kingname.info/tags/PIL/"/>
    
      <category term="Android" scheme="http://kingname.info/tags/Android/"/>
    
      <category term="自动化测试" scheme="http://kingname.info/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>如果我提前起床，闹钟你就别响</title>
    <link href="http://kingname.info/2016/11/07/autoalarmclock/"/>
    <id>http://kingname.info/2016/11/07/autoalarmclock/</id>
    <published>2016-11-07T14:56:21.000Z</published>
    <updated>2016-12-04T12:24:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>闹钟已经成了我们生活中必不可少的东西。如果全球每个国家的当地时间明天早上，所有的闹钟突然都不响了，不知道会发生什么样的混乱。</p>
<p>然而我们要讨论另外一种情况，闹钟每天定时响起来，真的是最好的情况吗？你有过醒来以后等闹钟的经历吗？如果你有时候在闹钟响之前就起来了，那么你会不会希望闹钟能知道你已经起来了？如果你提前醒了，那么闹钟就不响，只有你一直睡着的时候，闹钟才会按时响起来。<br><a id="more"></a></p>
<p>这个项目基于 Andorid 上面的自动化 workflow 程序 Automate 和 Python 制作。总代码量非常小。</p>
<p>做这个东西目的，是因为我现在早上有时候会在 7 点起床写东西，然后再去上班。但有时候可能会直接睡到 7 点 45 ，让闹钟把我闹醒。提前起床可能会忘记关闹钟，但是我不希望在我早上写作的时候被闹钟打扰。</p>
<p>如果我早上提前起床使用电脑，那么 Automate 可以得到信息，并关闭闹钟。如果 Automate 发现我 7 点 45 都还没有碰电脑，就会把我闹醒。整个过程，我不需要和闹钟有任何的交互。</p>
<p>这就是AutoAlarmClock这个项目存在的意义。</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>AutoAlarmClock分为三个部分，安卓手机上的Automate，VPS上面的Web Server和Mac OS上面的一行命令。</p>
<p>每天早上7点40，手机上的Automate会访问一个URL A：<a href="http://autoemo.kingname.info:745/alarm_clock" target="_blank" rel="external">http://autoemo.kingname.info:745/alarm_clock</a>，只要没有得到返回信息“No”，无论是网络问题，还是因为服务器返回的是其他信息，都会设定一个闹钟，在7点45分响起来。只有访问URL以后，服务器返回“No”，那么就不设闹钟。</p>
<p>对于电脑来说，每天早上7点30分，如果电脑是开着的，说明我正在工作。这个时候电脑就会自动访问一个URL B：<a href="http://autoemo.kingname.info:745/set_alarm" target="_blank" rel="external">http://autoemo.kingname.info:745/set_alarm</a>.只有这个URL被访问过，之前给Automate访问的URL A才会返回“No”。</p>
<h2 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h2><h3 id="Web-Server"><a href="#Web-Server" class="headerlink" title="Web Server"></a>Web Server</h3><p>Web Server是手机和电脑之间的桥梁。它是使用Python的Flask框架写成的。代码已经放在了Github上：<a href="https://github.com/kingname/Automatic.git" target="_blank" rel="external">AutoAlarmClock</a>. 包括空行总共只有32行代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'please visit my blog at http://kingname.info'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route("/alarm_clock")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">alarm_clock</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'alarmclock.txt'</span>):</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'alarmclock.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">            date_in_txt = f.read()</div><div class="line">            today = str(date.today())</div><div class="line">            <span class="keyword">if</span> date_in_txt == today:</div><div class="line">                <span class="keyword">return</span> <span class="string">'No'</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Yes'</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/set_alarm')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_alarm</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">with</span> open(<span class="string">'alarmclock.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(str(date.today()))</div><div class="line">    <span class="keyword">return</span> <span class="string">'OK'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">745</span>)</div></pre></td></tr></table></figure>
<p>由于这个Web Server每天只访问两次，所以没有必要使用数据库或者做线程安全的设置。数据只需要使用一个文本文件作为中转即可。一旦<a href="http://autoemo.kingname.info:745/set_alarm" target="_blank" rel="external">http://autoemo.kingname.info:745/set_alarm</a>这个链接被访问，就会在当前目录创建一个alarmclock.txt文件，里面存放的是今天的日期。当<a href="http://autoemo.kingname.info:745/alarm_clock" target="_blank" rel="external">http://autoemo.kingname.info:745/alarm_clock</a>被访问的时候，它会去检查alarmclock.txt，如果这个文件不存在，或者里面的日期不是今天的日期，那么它就会返回“Yes”。只有当alarmclock.txt存在，并且里面的内容为今天的日期，它才会返回“No”。</p>
<h3 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h3><p>电脑只需要访问<a href="http://autoemo.kingname.info:745/set_alarm" target="_blank" rel="external">http://autoemo.kingname.info:745/set_alarm</a>.由于Mac Book Pro只休眠，不关机，无法使用开机启动的方法来触发这个URL的访问。所以我使用了Crontab这个定时任务。因为在电脑休眠的时候，Crontab的定时任务是不会执行的，只有我在电脑上工作的时候，电脑开着才会访问这个URL，并让它生成记录今天日期的文本文件。</p>
<p>通过下面的命令设定Crontab定时任务，编辑器我选择的是VIM：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">env EDITOR=vim crontab -e</div></pre></td></tr></table></figure>
<p>定时任务设定为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">30 07 * * * curl -G http://autoemo.kingname.info:745/set_alarm</div></pre></td></tr></table></figure></p>
<p>表示每天的7点30分使用curl访问后面的链接。</p>
<p>Crontab在Linux下面也可以正常使用。</p>
<p>如果你的电脑为Windows，因为Windows电脑一般在晚上睡觉时会关机，所以访问URL的工作可以设定开机启动来完成。</p>
<p>首先创建一个EnableAlarmClock.py文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">requests.get(&apos;http://autoemo.kingname.info:745/set_alarm&apos;)</div></pre></td></tr></table></figure></p>
<p>这个文件用到了Python的requests库，如果你没有的话，请使用pip安装。</p>
<p>再创建一个EnableAlarmClock.bat文件，文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python EnableAlarmClock.py</div></pre></td></tr></table></figure></p>
<p>打开Windows的 <strong>任务计划</strong> ，触发器选择“当前用户登录时”，操作选择“启动程序”，并填写EnableAlarmClock.bat的路径，如下图所示：</p>
<p><img src="http://7sbpmp.com1.z0.glb.clouddn.com/task.png" alt=""></p>
<p>这样，每次开机登录桌面的时候，程序自动就会访问设定闹钟的页面了。</p>
<h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><p>Automate是安卓上面的一个强大的自动化工具，类似于IFTTT和iOS上面的Workflow。</p>
<p>在Automate中创建一个Flow，如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/Screenshot_20161108-074321.png" alt=""><br>其中涉及到了”Time await”, “HTTP request”, “Expression true?”, “Alarm add”这几个组件。</p>
<ul>
<li><p>“Time await”的设置如下图所示：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/Screenshot_20161107-224111.png" alt=""></p>
</li>
<li><p>“HTTP request”的设置为下面两张图：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/Screenshot_20161107-224136.png" alt=""><br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/Screenshot_20161107-224142.png" alt=""></p>
</li>
<li><p>“Alarm add”的设置为下图：<br><img src="http://7sbpmp.com1.z0.glb.clouddn.com/Screenshot_20161107-224155.png" alt=""><br>这里由于没有设置“REPEAT WEEKDAYS”这一项，所以闹钟都是一次性的，关了以后，第二天需要再根据实际情况来让Automate来决定是否需要创建。</p>
</li>
</ul>
<p>设置并启动这个Flow以后，每天早上的闹钟就可以根据你是否在电脑前面工作而决定要不要闹响了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闹钟已经成了我们生活中必不可少的东西。如果全球每个国家的当地时间明天早上，所有的闹钟突然都不响了，不知道会发生什么样的混乱。&lt;/p&gt;
&lt;p&gt;然而我们要讨论另外一种情况，闹钟每天定时响起来，真的是最好的情况吗？你有过醒来以后等闹钟的经历吗？如果你有时候在闹钟响之前就起来了，那么你会不会希望闹钟能知道你已经起来了？如果你提前醒了，那么闹钟就不响，只有你一直睡着的时候，闹钟才会按时响起来。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="Workflow" scheme="http://kingname.info/tags/Workflow/"/>
    
      <category term="Automate" scheme="http://kingname.info/tags/Automate/"/>
    
  </entry>
  
  <entry>
    <title>alias导致virtualenv异常的分析和解法</title>
    <link href="http://kingname.info/2016/06/27/alias-vs-virtualenv/"/>
    <id>http://kingname.info/2016/06/27/alias-vs-virtualenv/</id>
    <published>2016-06-27T15:40:56.000Z</published>
    <updated>2016-11-30T13:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>virtualenv 可以虚拟出一个独立的Python环境，在这个环境中安装的第三方库不会对系统中的Python产生影响。作为一个系统洁癖，我的系统中的Python环境只安装最主要的第三方库，我在开发Python项目的时候一般使用virtualenv生成的独立环境来安装项目需要的第三方库。但是如果同时使用了zsh的alias 和virtualenv，有可能就会导致virtualenv下面的python不能使用第三方库。</p>
<h2 id="Python的运行方式"><a href="#Python的运行方式" class="headerlink" title="Python的运行方式"></a>Python的运行方式</h2><p>一般我们会使用以下两种方式之一来运行Python：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python xxx.py</div></pre></td></tr></table></figure>
<p>或者在代码的第一行加上python的路径：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/local/bin/python</span></div></pre></td></tr></table></figure>
<p>这两种方式，使用的是系统中的Python来解释代码。</p>
<h2 id="问题的复现"><a href="#问题的复现" class="headerlink" title="问题的复现"></a>问题的复现</h2><p>如果电脑上安装了Python2 和Python3， 那么想运行Python3写的代码的时候，我们可以使用以下方法来运行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 xxx.py</div></pre></td></tr></table></figure>
<p>但是由于有人不想写数字3， 于是就使用了zsh的alias功能，在<code>~/.zshrc</code>文件中，添加了一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias python=/usr/local/bin/python3</div></pre></td></tr></table></figure>
<p>在这种情况下，使用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python xxx.py</div></pre></td></tr></table></figure>
<p>就可以通过Python3来解析代码了。这种方式使用系统中的Python没有问题，但是如果在virtualenv下面可就惨了。</p>
<p>我们创建一个虚拟环境并激活，安装Python的requests库，再启动python并导入requests库, 并其代码流程如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ virtualenv --python=python3 venv</div><div class="line">$ . venv/bin/activate</div><div class="line">$ pip install requests</div><div class="line">$ python</div><div class="line">&gt;&gt;&gt;import requests</div></pre></td></tr></table></figure>
<p>如果我们设置了上面的alias，那么你一定会得到下面的结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ImportError: No module named requests</div></pre></td></tr></table></figure>
<p>于是你打开<code>venv/lib/python3.5/site-packages</code>却发现requests安安静静的躺在里面。于是你百思不得其解，明明pip 是把requests安装在虚拟环境下面的，为什么Python不能正常导入呢？于是你再执行以下代码查看环境变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">print(sys.path)</div></pre></td></tr></table></figure>
<p>你看到的可能是下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[&apos;&apos;,</div><div class="line">&apos;/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python35.zip&apos;,</div><div class="line">&apos;/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5&apos;,</div><div class="line">&apos;/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/plat-darwin&apos;,</div><div class="line">&apos;/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/lib-dynload&apos;,</div><div class="line">&apos;/usr/local/lib/python3.5/site-packages&apos;]</div></pre></td></tr></table></figure>
<p>全部是系统下面Python的路径，和你的virtualenv 没有一点点的关系。</p>
<p>然后你退出Python，在虚拟环境下面打印PATH，你却发现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo $PATH</div><div class="line">/Users/kingname/jikexueyuan/class_spider_basic/program/mongodb/venv/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</div></pre></td></tr></table></figure>
<p>你的virtualenv环境好好的躺在你的环境变量的最前面。于是你快要疯掉了，到底是什么鬼，怎么会发生如此灵异的事件？系统不应该是首先找环境变量第一个位置下面的Python吗？怎么会跳过虚拟环境，去打开了系统中的Python呢？应该直接打开虚拟环境下面的Python才对啊！</p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>问题的根源就在你的alias上面。</p>
<p>zsh 的alias的优先级是非常高的，它会首先替换为等号后面的内容，然后再执行。那么即使在虚拟环境下，在终端输入<code>python</code>并回车以后，实际执行的代码是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/python3</div></pre></td></tr></table></figure>
<p>你使用了绝对路径打开了系统中的Python3。</p>
<p>而由于你没有对pip 设定alias, 因此你使用pip 安装requests的时候，它调用的是虚拟环境下面的pip,所以requests会正确安装在虚拟环境下面。</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>解决办法有两个:</p>
<ol>
<li>在<code>~/.zshrc</code>中删除下面的代码，并重启终端：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias python=/usr/local/bin/python3</div></pre></td></tr></table></figure>
<ol>
<li>将<code>~/.zshrc</code>中的：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias python=/usr/local/bin/python3</div></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias python=python3</div></pre></td></tr></table></figure>
<p>本文首发地址： <a href="http://kingname.info/2016/06/27/alias-vs-virtualenv/">http://kingname.info/2016/06/27/alias-vs-virtualenv/</a>转载请注明出处。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;virtualenv 可以虚拟出一个独立的Python环境，在这个环境中安装的第三方库不会对系统中的Python产生影响。作为一个系统洁癖，我的系统中的Python环境只安装最主要的第三方库，我在开发Python项目的时候一般使用virtualenv生成的独立环境来安装项目
    
    </summary>
    
      <category term="OS X" scheme="http://kingname.info/categories/OS-X/"/>
    
    
      <category term="OS X" scheme="http://kingname.info/tags/OS-X/"/>
    
      <category term="ZSH" scheme="http://kingname.info/tags/ZSH/"/>
    
      <category term="alias" scheme="http://kingname.info/tags/alias/"/>
    
      <category term="virtualenv" scheme="http://kingname.info/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>可爱的豆子——使用Beans思想让Python代码更易维护</title>
    <link href="http://kingname.info/2016/06/19/bean-in-python/"/>
    <id>http://kingname.info/2016/06/19/bean-in-python/</id>
    <published>2016-06-19T13:43:33.000Z</published>
    <updated>2016-11-30T13:56:15.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;我曾经是一个对Java非常反感的人，因为Java的语法非常啰嗦。而用惯了动态类型的Python再使用静态类型的Java就会觉得多出了很多的工作量。&lt;/p&gt;
&lt;p&gt;因为工作的关系，我开始使用Java来做项目。在这个过程中，我发现Java在某些方面确实和Python不一样。&lt;/
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="Java" scheme="http://kingname.info/tags/Java/"/>
    
      <category term="经验" scheme="http://kingname.info/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>MarkdownPicPicker - Markdown 图片上传助手</title>
    <link href="http://kingname.info/2016/06/04/markdownPicPicker/"/>
    <id>http://kingname.info/2016/06/04/markdownPicPicker/</id>
    <published>2016-06-04T08:40:06.000Z</published>
    <updated>2016-11-30T13:56:22.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h2&gt;&lt;p&gt;MarkdownPicPicker 是基于Python3 的Markdown写作辅助工具， 作者是我。它能将剪贴板中的图片上
    
    </summary>
    
      <category term="Markdown" scheme="http://kingname.info/categories/Markdown/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="Markdown" scheme="http://kingname.info/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>搭建持续集成环境(一)</title>
    <link href="http://kingname.info/2016/05/29/raspberryCI-1/"/>
    <id>http://kingname.info/2016/05/29/raspberryCI-1/</id>
    <published>2016-05-29T06:04:49.000Z</published>
    <updated>2016-11-30T13:56:40.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开题说明&quot;&gt;&lt;a href=&quot;#开题说明&quot; class=&quot;headerlink&quot; title=&quot;开题说明&quot;&gt;&lt;/a&gt;开题说明&lt;/h2&gt;&lt;p&gt;软件开发的过程是一个从简单到复杂的过程。我们在开发的时候，会首先写出具有核心的功能的原型，满足基本的需求。但是这个原型使用非
    
    </summary>
    
      <category term="持续集成" scheme="http://kingname.info/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Jenkins" scheme="http://kingname.info/tags/Jenkins/"/>
    
      <category term="持续集成" scheme="http://kingname.info/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>使用Python保存截图</title>
    <link href="http://kingname.info/2016/05/19/screenshot/"/>
    <id>http://kingname.info/2016/05/19/screenshot/</id>
    <published>2016-05-19T14:47:29.000Z</published>
    <updated>2016-11-30T13:56:41.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://jikexueyuan.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;极客学院&lt;
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="Win32Api" scheme="http://kingname.info/tags/Win32Api/"/>
    
  </entry>
  
  <entry>
    <title>机器学习（二）</title>
    <link href="http://kingname.info/2016/01/19/ml2/"/>
    <id>http://kingname.info/2016/01/19/ml2/</id>
    <published>2016-01-19T14:32:10.000Z</published>
    <updated>2016-11-30T13:56:26.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多特征&quot;&gt;&lt;a href=&quot;#多特征&quot; class=&quot;headerlink&quot; title=&quot;多特征&quot;&gt;&lt;/a&gt;多特征&lt;/h2&gt;&lt;p&gt;在现实的问题中，特征变量往往不仅仅只有一个。我们评估一个人能否成为一个人生赢家，不仅仅要考虑他的家产，还有考虑他的父亲的背景，和他的
    
    </summary>
    
      <category term="机器学习" scheme="http://kingname.info/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://kingname.info/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习（一）</title>
    <link href="http://kingname.info/2016/01/11/ml-1/"/>
    <id>http://kingname.info/2016/01/11/ml-1/</id>
    <published>2016-01-10T16:12:34.000Z</published>
    <updated>2016-11-30T13:56:24.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;最近在Coursera 上学习斯坦福大学的机器学习。根据费曼学习法的理论，教是最好最快最有效果的学习方法。因此，我将会开一系列机器学习相关的
    
    </summary>
    
      <category term="机器学习" scheme="http://kingname.info/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://kingname.info/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>对Java与设计模式态度的转变</title>
    <link href="http://kingname.info/2015/12/02/opinionchange/"/>
    <id>http://kingname.info/2015/12/02/opinionchange/</id>
    <published>2015-12-01T16:03:08.000Z</published>
    <updated>2016-11-30T13:56:32.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;我一直自诩自己是Java一生黑。也从来不屑于设计模式这种东西，因为我一直认为，设计模式是为了解决Java的一些缺陷才存在的。对于Python来说，设计模式并不重要。不过最近在做一个新功能开发的时候对Java的态度有了一些改变。&lt;more&gt;&lt;/more&gt;&lt;/p&gt;
&lt;p&gt;事情的
    
    </summary>
    
      <category term="态度" scheme="http://kingname.info/categories/%E6%80%81%E5%BA%A6/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="Java" scheme="http://kingname.info/tags/Java/"/>
    
      <category term="设计模式" scheme="http://kingname.info/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用etree.HTML的编码问题</title>
    <link href="http://kingname.info/2015/10/07/lxmlencoding/"/>
    <id>http://kingname.info/2015/10/07/lxmlencoding/</id>
    <published>2015-10-07T09:56:47.000Z</published>
    <updated>2016-11-30T13:56:19.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h2&gt;&lt;p&gt;今天指导一个学生爬取新浪体育手机版的时候，发现lxml.etree.HTML处理网页源代码会默认修改编码，导致打印出来的内容
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="lxml" scheme="http://kingname.info/tags/lxml/"/>
    
      <category term="Xpath" scheme="http://kingname.info/tags/Xpath/"/>
    
  </entry>
  
  <entry>
    <title>我的编码规范</title>
    <link href="http://kingname.info/2015/07/19/mycodestyle/"/>
    <id>http://kingname.info/2015/07/19/mycodestyle/</id>
    <published>2015-07-19T08:31:54.000Z</published>
    <updated>2016-11-30T13:56:28.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开篇闲扯&quot;&gt;&lt;a href=&quot;#开篇闲扯&quot; class=&quot;headerlink&quot; title=&quot;开篇闲扯&quot;&gt;&lt;/a&gt;开篇闲扯&lt;/h2&gt;&lt;p&gt;距离上一次更新已经有快三个月了，这三个月我都在干什么呢？首先是继续实习，因为一些原因，本来计划的三个月实习变成了四个月。在实
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="CodeStyle" scheme="http://kingname.info/tags/CodeStyle/"/>
    
  </entry>
  
  <entry>
    <title>requests的content与text导致lxml的解析问题</title>
    <link href="http://kingname.info/2015/04/29/lxmloldbug/"/>
    <id>http://kingname.info/2015/04/29/lxmloldbug/</id>
    <published>2015-04-29T14:49:31.000Z</published>
    <updated>2016-11-30T13:56:21.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;最近实习工作任务比较重，又在做数据挖掘的教学工作，同时还在做毕设，所以博客更新比较慢。不过最近肯定会有大动作。&lt;/p&gt;
&lt;p&gt;闲话毕，转正题。在制作新浪微博模拟登录的部分时，遇到了一些问题。&lt;/p&gt;
&lt;p&gt;我使用requests获取了新浪微博的源代码，通过lxml库的etr
    
    </summary>
    
      <category term="经验" scheme="http://kingname.info/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="lxml" scheme="http://kingname.info/tags/lxml/"/>
    
      <category term="etree" scheme="http://kingname.info/tags/etree/"/>
    
  </entry>
  
  <entry>
    <title>Python的单元测试（二）</title>
    <link href="http://kingname.info/2015/03/04/pythonunittest2/"/>
    <id>http://kingname.info/2015/03/04/pythonunittest2/</id>
    <published>2015-03-04T11:08:20.000Z</published>
    <updated>2016-11-30T13:56:34.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://kingname.info/2015/02/27/Python%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/&quot;&gt;Python的单元测试（一）&lt;/a&gt;中，我们讲了单元测试的概念以及一个简单的单元测
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="单元测试" scheme="http://kingname.info/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python的单元测试（一）</title>
    <link href="http://kingname.info/2015/02/27/Python%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://kingname.info/2015/02/27/Python的单元测试/</id>
    <published>2015-02-27T14:50:47.000Z</published>
    <updated>2016-11-30T13:56:36.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;测试驱动的软件开发方式可以强迫程序员在开发程序的时候使程序的函数之间实现高内聚，低耦合。这样的方式可以降低函数之间的依赖性，方便后续的修改，增加功能和维护。&lt;/p&gt;
&lt;p&gt;说&lt;strong&gt;一个函数&lt;/strong&gt;高内聚，就是指这个函数专注于实现单一的任务，不会做除了生产
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="单元测试" scheme="http://kingname.info/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>未知道——广场式的真匿名交流网站（一）</title>
    <link href="http://kingname.info/2015/01/30/%E6%9C%AA%E7%9F%A5%E9%81%93%E2%80%94%E2%80%94%E5%B9%BF%E5%9C%BA%E5%BC%8F%E7%9A%84%E7%9C%9F%E5%8C%BF%E5%90%8D%E4%BA%A4%E6%B5%81%E7%BD%91%E7%AB%99/"/>
    <id>http://kingname.info/2015/01/30/未知道——广场式的真匿名交流网站/</id>
    <published>2015-01-30T07:24:35.000Z</published>
    <updated>2016-11-30T13:56:54.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习Flask，本着学以致用的原则，开发了“未知道”这个网站。未知道的宗旨是，不注册，不审核，不删帖，无私聊，不记录任何信息。是一个派对式的或者说广场式的真·匿名聊天环境。&lt;/p&gt;
&lt;p&gt;网站地址请戳-&amp;gt;&lt;a href=&quot;http://unknown.kingn
    
    </summary>
    
      <category term="未知道" scheme="http://kingname.info/categories/%E6%9C%AA%E7%9F%A5%E9%81%93/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="Flask" scheme="http://kingname.info/tags/Flask/"/>
    
      <category term="BootStrap" scheme="http://kingname.info/tags/BootStrap/"/>
    
      <category term="匿名聊天" scheme="http://kingname.info/tags/%E5%8C%BF%E5%90%8D%E8%81%8A%E5%A4%A9/"/>
    
  </entry>
  
  <entry>
    <title>xpath提取多个标签下的text</title>
    <link href="http://kingname.info/2015/01/17/xpath%E6%8F%90%E5%8F%96%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE%E4%B8%8B%E7%9A%84text/"/>
    <id>http://kingname.info/2015/01/17/xpath提取多个标签下的text/</id>
    <published>2015-01-17T08:01:07.000Z</published>
    <updated>2016-11-30T13:56:42.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;在写爬虫的时候，经常会使用xpath进行数据的提取，对于如下的代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="xpath" scheme="http://kingname.info/tags/xpath/"/>
    
      <category term="xml" scheme="http://kingname.info/tags/xml/"/>
    
      <category term="scrapy" scheme="http://kingname.info/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>清空Github上某个文件的历史</title>
    <link href="http://kingname.info/2015/01/08/%E6%B8%85%E7%A9%BAGithub%E4%B8%8A%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E5%8E%86%E5%8F%B2/"/>
    <id>http://kingname.info/2015/01/08/清空Github上某个文件的历史/</id>
    <published>2015-01-08T08:04:53.000Z</published>
    <updated>2016-11-30T13:56:46.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;文章首发地址：&lt;a href=&quot;http://kingname.info&quot;&gt;http://kingname.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天在Github更新代码的时候，不小心把Gmail私钥文件更新上去了。即便我立刻删除了这个文件，可是在版本历史里面仍然可以看到这个文
    
    </summary>
    
      <category term="经验" scheme="http://kingname.info/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Github" scheme="http://kingname.info/tags/Github/"/>
    
      <category term="history" scheme="http://kingname.info/tags/history/"/>
    
  </entry>
  
  <entry>
    <title>如何正确使用日志Log</title>
    <link href="http://kingname.info/2015/01/08/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97log/"/>
    <id>http://kingname.info/2015/01/08/如何正确使用日志log/</id>
    <published>2015-01-08T04:54:46.000Z</published>
    <updated>2016-11-30T13:56:48.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      &lt;p&gt;文章首发地址：&lt;a href=&quot;http://kingname.info&quot;&gt;http://kingname.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章不会教你在技术角度上使用log，而是告诉你为什么要使用log日志功能。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用Log&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="Python" scheme="http://kingname.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://kingname.info/tags/Python/"/>
    
      <category term="log" scheme="http://kingname.info/tags/log/"/>
    
  </entry>
  
</feed>
